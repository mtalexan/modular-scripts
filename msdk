export MSDK_BASEDIR=${HOME}/msdk_code_repos
export TOP_ZPOOL=phyhomedir/home # this must already exist
# The pool to create git clones in that we'll create ZFS clones of.
# Will be auto-created as long as it's only 1 level deep from TOP_ZPOOL
export BASE_ZPOOL=${TOP_ZPOOL}/msdk
# The pool to create ZFS clones in
# Will be auto-created as long as it's only 1 level deep from TOP_ZPOOL or BASE_ZPOOL
export BASE_CLONE_ZPOOL=${BASE_ZPOOL}/clones


#because we want this to change the directory of the invoker, we need to source
#this in the .bashrc and declare it as a shell function
msdk() {
    local FULL_DIR=$(${LOCAL_REPOS_DIR}/msdk.sh $*)
    if [ $? -ne 0 ] ; then
        return 1
    elif [ -z "${FULL_DIR}" ] ; then
        cd ${FULL_DIR}
    fi
}

_msdk_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    #list of directories under ${MSDK_BASEDIR}, excluding hidden ones
    if [ ${COMP_CWORD} -eq 1 ] ; then
        if [ -z "${COMP_WORDS[${COMP_CWORD}]}" ] ; then
            # single character completions, see below for multi-character completions
            COMPREPLY+=("/") # directory lookup under the current msdk
            COMPREPLY+=("-") # posix extended regex on matches
            COMPREPLY+=(".") # glob search pattern on matches
        fi

        local MSDK_DIRLIST
        MSDK_DIRLIST=$(find ${MSDK_BASEDIR} -maxdepth 1 -mindepth 1 \( -type d -o -type l \) | sed -e "s@${MSDK_BASEDIR}/@@g")
        COMPREPLY+=($(compgen -W "${MSDK_DIRLIST} grep glob" "${COMP_WORDS[${COMP_CWORD}]}"))
        # trying to complete the msdk we're looking for
    elif [ ${COMP_CWORD} -eq 2 ] ; then
        if [ "${COMP_WORDS[1]}" == "/" ] ; then
            #based on current msdk setting, do subdir matching
            if [ -z "$MSDK_ROOT_DIR" ] ; then
                echo ""
                echo 1>&2 'ERROR: MSDK_ROOT_DIR not set, cannot default to $MSDK_ROOT_DIR'
            else
                # strip the msdk directory from the returned completion results
                COMPREPLY+=($(compgen -d -- "${MSDK_ROOT_DIR}/${COMP_WORDS[${COMP_CWORD}]}" | sed -e "s@${MSDK_ROOT_DIR}/@@g"))

                # don't add the space after this completion if it's going to autocomplete because of a single match
                compopt -o nospace -o filenames
            fi
        elif [ "${COMP_WORDS[1]}" == ".." ] || [ "${COMP_WORDS[1]}" == "." ] ; then
            #can't complete globs, return empty
            COMPREPLY=()
        elif [ -z "${COMP_WORDS[${COMP_CWORD}]}" ] ; then
            COMPREPLY+=("/") # directory lookup command
            COMPREPLY+=("") # need to give it a second option so it doesn't always add this completion
        elif [ "${COMP_WORDS[${COMP_CWORD}]}" == "/" ] ; then
            # directory lookup command only, let it complete so the space after the completion gets added too
            COMPREPLY+=("/")
        else
            COMPREPLY=()
        fi
    elif [ ${COMP_CWORD} -eq 3 ] ; then
        if [ "${COMP_WORDS[2]}" == "/" ] ; then
            # do directory completion in msdk set by ${COMP_WORDS[1]}
            # strip the msdk directory from the returned completion results
            COMPREPLY+=($(compgen -d -- "${MSDK_BASEDIR}/${COMP_WORDS[1]}/${COMP_WORDS[${COMP_CWORD}]}" | sed -e "s@${MSDK_BASEDIR}/${COMP_WORDS[1]}/@@g"))

            # don't add the space after this completion if it's going to autocomplete because of a single match
            compopt -o nospace -o filenames
        else
            # can't use subdir lookup on a pattern match, so we can't have a '/' argument now
            COMPREPLY=()
        fi
    else
        COMPREPLY=()
    fi
}

smsdk() {
    local FILE=$(${LOCAL_REPOS_DIR}/smsdk.sh $*)
    if [ $? -ne 0 ] ; then
        return 1
    elif [ -z "${FILE}" ] ; then
        source $FILE
        # move to the new modularSDK
        cd ${MSDK_ROOT_DIR}
    fi
}

# completion utility function
_add_msdk_dirlist() {
    ${LOCAL_REPOS_DIR}/get_msdk_dirlist.sh $*
}

# shared by lmsdk and smsdk
_smsdk_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    #list of directories under ${MSDK_BASEDIR}, excluding hidden ones
    if [ ${COMP_CWORD} -eq 1 ] ; then
        if [ -z "${COMP_WORDS[${COMP_CWORD}]}" ] ; then
            # single character completions, see below for multi-character completions
            COMPREPLY+=("-") # posix extended regex on matches
            COMPREPLY+=(".") # glob search pattern on matches
        fi

        local COMPREPLYPOSSIBLE
        typeset -a COMPREPLYPOSSIBLE
        COMPREPLYPOSSIBLE+=("$(_add_msdk_dirlist)")
        COMPREPLY+=($(compgen -W "${COMPREPLYPOSSIBLE[@]} grep glob" "${COMP_WORDS[${COMP_CWORD}]}"))
    else
        # can't complete patterns, and don't have any other possible arguments
        COMPREPLY=()
    fi
}

# runs in subshell with parentheses instead of curlys
lmsdk() {
    ${LOCAL_REPOS_DIR}/lmsdk.sh $*
}

complete -F _msdk_completions msdk
complete -F _smsdk_completions smsdk
complete -F _smsdk_completions lmsdk

#function rmmsdk() -- defined as stand-alone script

# wrapped shell script
rmmsdkz() {
    zfs_rmmsdk.sh $*
    return $?
}

# wrapped shell script
rmmsdk_containers() {
    containers_rmmsdk.sh $*
    return $?
}

# Used for completion of rmmsdk, rmmsdkz, rmmsdk_containers
_rmmsdk_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    local COMPREPLYPOSSIBLE
    typeset -a COMPREPLYPOSSIBLE
    COMPREPLYPOSSIBLE+=("$(_add_msdk_dirlist)")

    #can't provide via array for some reason, so make it unique in a single variable
    local GIVEIT=$(echo "${COMPREPLYPOSSIBLE[@]}" | sort -u)

    COMPREPLY+=($(compgen -W "${GIVEIT}" "${COMP_WORDS[${COMP_CWORD}]}"))
}

complete -F _rmmsdk_completions rmmsdk
complete -F _rmmsdk_completions rmmsdkz
complete -F _rmmsdk_completions rmmsdk_containers

# completion utility function
_add_base_zfs_clones() {
    ${LOCAL_REPOS_DIR}/get_base_zfs_clones.sh $*
}


# completion utility function
_add_base_zfs_clone_snaps() {
    ${LOCAL_REPOS_DIR}/get_base_zfs_clone_snaps.sh $*
}

# completion utility function
_add_zfs_clones() {
    ${LOCAL_REPOS_DIR}/get_zfs_clones.sh $*
}

# completion utility function
_add_zfs_clone_snaps() {
    ${LOCAL_REPOS_DIR}/get_zfs_clone_snaps.sh $*
}

# wrapped shell script
dupmsdk() {
    zfs_mk_clone.sh $*
    return $?
}

# wrapped shell script
mk_zfs_clone() {
    zfs_mk_clone.sh $*
    return $?
}

# Used for completion of mk_zfs_clone, newmsdkz
_dupmsdk_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    if [ ${COMP_CWORD} -eq 1 ] ; then

        local COMPREPLYPOSSIBLE
        typeset -a COMPREPLYPOSSIBLE
        COMPREPLYPOSSIBLE+=("$(_add_msdk_dirlist)")
        COMPREPLYPOSSIBLE+=("$(_add_base_zfs_clones)")
        COMPREPLYPOSSIBLE+=("$(_add_base_zfs_clone_snaps)")
        COMPREPLYPOSSIBLE+=("$(_add_zfs_clones)")
        COMPREPLYPOSSIBLE+=("$(_add_zfs_clone_snaps)")

        #can't provide via array for some reason, so make it unique in a single variable
        local GIVEIT=$(echo "${COMPREPLYPOSSIBLE[@]}" | sort -u)
        COMPREPLY+=($(compgen -W "${GIVEIT}" "${COMP_WORDS[${COMP_CWORD}]}"))
    else
        # can't complete new names
        COMPREPLY=()
    fi
}

complete -F _dupmsdk_completions dupmsdk
complete -F _dupmsdk_completions mk_zfs_clone

# wrapped shell script
newmsdkz() {
    zfs_newmsdk.sh $*
    return $?
}


# Used for completion of newmsdkz
_newmsdkz_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    if [ ${COMP_CWORD} -gt 1 ] ; then
        local PREVIOUS=$(( ${COMP_CWORD} - 1 ))
        if [[ "${COMP_WORDS[${PREVIOUS}]}" == "-f" ]] || [[ "${COMP_WORDS[${PREVIOUS}]}" == "--from" ]] ; then
            local COMPREPLYPOSSIBLE
            typeset -a COMPREPLYPOSSIBLE
            COMPREPLYPOSSIBLE+=("$(_add_base_zfs_clones)")
            COMPREPLYPOSSIBLE+=("$(_add_base_zfs_clone_snaps)")
            COMPREPLYPOSSIBLE+=("$(_add_zfs_clones)")
            COMPREPLYPOSSIBLE+=("$(_add_zfs_clone_snaps)")

            #can't provide via array for some reason, so make it unique in a single variable
            local GIVEIT=$(echo "${COMPREPLYPOSSIBLE[@]}" | sort -u)

            COMPREPLY+=($(compgen -W "${GIVEIT}" "${COMP_WORDS[${COMP_CWORD}]}"))
        else
            COMPREPLY=()
        fi
    else
        COMPREPLY=()
    fi
}

complete -F _newmsdkz_completions newmsdkz

# wrapped shell script
rm_zfs_clone() {
    zfs_rm_clone.sh $*
    return $?
}

# Used for completion of rm_zfs_clone
_rm_zfs_clone_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    local COMPREPLYPOSSIBLE
    typeset -a COMPREPLYPOSSIBLE
    COMPREPLYPOSSIBLE+=("$(_add_zfs_clones)")

    #can't provide via array for some reason, so make it unique in a single variable
    local GIVEIT=$(echo "${COMPREPLYPOSSIBLE[@]}" | sort -u)

    COMPREPLY+=($(compgen -W "${GIVEIT}" "${COMP_WORDS[${COMP_CWORD}]}"))
}

complete -F _rm_zfs_clone_completions rm_zfs_clone

msdkz_parent() {
    ${LOCAL_REPOS_DIR}/get_msdkz_parent.sh $*
}

_msdkz_parent_completions() {
    if [ -n "${ZSH_NAME}" ] ; then
        # for ZSH emulate ksh mode for this function locally to make it easier to re-use between bash & zsh
        # Specifically array indexing
        emulate -L ksh
    fi

    if [ ${COMP_CWORD} -eq 1 ] ; then
        local COMPREPLYPOSSIBLE
        typeset -a COMPREPLYPOSSIBLE
        COMPREPLYPOSSIBLE+=("$(_add_zfs_clones)")

        #can't provide via array for some reason, so make it unique in a single variable
        local GIVEIT=$(echo "${COMPREPLYPOSSIBLE[@]}" | sort -u)
        COMPREPLY+=($(compgen -W "${GIVEIT}" "${COMP_WORDS[${COMP_CWORD}]}"))
    else
        # can't complete new names
        COMPREPLY=()
    fi
}

complete -F _msdkz_parent_completions msdkz_parent
